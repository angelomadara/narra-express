#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

function createNarraApp() {
  const projectName = process.argv[2] || 'my-narra-app';
  const currentDir = process.cwd();
  const projectDir = path.join(currentDir, projectName);

  console.log(`🚀 Creating a new Narra Express app in ${projectDir}`);

  // Create project directory
  if (fs.existsSync(projectDir)) {
    console.error(`❌ Directory ${projectName} already exists!`);
    process.exit(1);
  }

  fs.mkdirSync(projectDir, { recursive: true });

  // Copy template files
  const templateDir = path.join(__dirname, '..');
  const filesToCopy = [
    'src',
    'scripts', 
    'database',
    'docs',
    'http',
    '.env.example',
    'tsconfig.json',
    'nodemon.json',
    'README.md'
  ];

  console.log('📁 Copying template files...');
  
  filesToCopy.forEach(file => {
    const srcPath = path.join(templateDir, file);
    const destPath = path.join(projectDir, file);
    
    if (fs.existsSync(srcPath)) {
      if (fs.lstatSync(srcPath).isDirectory()) {
        copyDirectory(srcPath, destPath);
      } else {
        fs.copyFileSync(srcPath, destPath);
      }
      console.log(`✅ Copied ${file}`);
    }
  });

  // Create package.json for the new project
  const newPackageJson = {
    name: projectName,
    version: "1.0.0",
    description: "Express.js backend API with TypeScript - Generated by Narra Express",
    main: "src/server.ts",
    scripts: {
      build: "tsc",
      start: "node dist/server.js", 
      dev: "nodemon src/server.ts",
      "dev:build": "tsc --watch",
      "setup-db": "node scripts/setup-db.ts"
    },
    dependencies: {
      "@types/mongodb": "^4.0.6",
      axios: "^1.7.7",
      bcryptjs: "^3.0.2",
      cheerio: "^1.0.0",
      "class-transformer": "^0.5.1",
      "class-validator": "^0.14.2",
      cors: "^2.8.5",
      csurf: "^1.11.0",
      dotenv: "^16.3.1",
      express: "^4.18.2",
      "express-rate-limit": "^7.5.1",
      "express-validator": "^7.2.1",
      helmet: "^8.1.0",
      jsonwebtoken: "^9.0.2",
      mongodb: "^6.20.0",
      mysql2: "^3.15.0",
      nodemailer: "^7.0.6",
      "reflect-metadata": "^0.2.2",
      typeorm: "^0.3.26"
    },
    devDependencies: {
      "@types/bcryptjs": "^2.4.6",
      "@types/cors": "^2.8.13",
      "@types/express": "^4.17.17",
      "@types/jsonwebtoken": "^9.0.10",
      "@types/node": "^20.5.0",
      "@types/nodemailer": "^7.0.1",
      nodemon: "^3.0.1",
      "ts-node": "^10.9.1",
      typescript: "^5.2.2"
    },
    keywords: ["express", "typescript", "api", "backend"],
    author: "Your Name",
    license: "MIT"
  };

  fs.writeFileSync(
    path.join(projectDir, 'package.json'),
    JSON.stringify(newPackageJson, null, 2)
  );

  console.log('📦 Created package.json');
  console.log('📦 Installing dependencies...');
  
  // Install dependencies
  process.chdir(projectDir);
  execSync('npm install', { stdio: 'inherit' });

  console.log(`
🎉 Success! Created ${projectName} 

📖 Get started by running:

  cd ${projectName}
  cp .env.example .env
  # Update .env with your database credentials
  npm run dev

📚 Read the documentation in the docs/ folder
🧪 Test API endpoints using files in http/ folder  
🗃️  Setup database with: npm run setup-db

Happy coding! 🚀
  `);
}

function copyDirectory(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const files = fs.readdirSync(src);
  
  files.forEach(file => {
    const srcPath = path.join(src, file);
    const destPath = path.join(dest, file);
    
    if (fs.lstatSync(srcPath).isDirectory()) {
      copyDirectory(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  });
}

createNarraApp();